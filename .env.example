# Root Environment Variables for Docker Compose
# Copy this file to .env and update with your values

# Supabase Configuration
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_SERVICE_KEY=your-service-role-key-here
SUPABASE_ANON_KEY=your-anon-key-here
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key-here

# Application Settings
ENVIRONMENT=development
DEBUG=true

# Backend Specific Settings
BACKEND_HOST=0.0.0.0
BACKEND_PORT=8000
CORS_ORIGINS=["http://localhost:3000", "http://127.0.0.1:3000", "http://frontend:3000", "http://frontend-dev:3000"]

# Frontend Specific Settings
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_APP_NAME=SaaS Platform
NEXT_PUBLIC_APP_DESCRIPTION=Multi-tenant SaaS application template

# Database Migration Settings (Alembic)
# Note: For migrations, use the postgres user with database password
# Format: postgresql://postgres:[PASSWORD]@[PROJECT-REF].supabase.co:5432/postgres
# IMPORTANT: Update 'your-database-password-here' with your actual Supabase database password
# Special characters in passwords must be URL-encoded:
# # should be encoded as %23
# @ should be encoded as %40
# ! should be encoded as %21
# etc.
DATABASE_URL=postgresql://postgres:your-database-password-here@your-project-ref.supabase.co:5432/postgres

# New Relic Configuration for OpenTelemetry
NEW_RELIC_LICENSE_KEY=your-new-relic-license-key-here
NEW_RELIC_APP_NAME=SaaS Platform

# OpenTelemetry Configuration - Traces
OTEL_ENABLED=true
OTEL_SERVICE_NAME=saas-platform
OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317
OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=grpc
OTEL_EXPORTER_OTLP_TRACES_INSECURE=true

# OpenTelemetry Configuration - Metrics
OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4317
OTEL_EXPORTER_OTLP_METRICS_PROTOCOL=grpc
OTEL_EXPORTER_OTLP_METRICS_INSECURE=true

# OpenTelemetry Configuration - Logs
OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://otel-collector:4317
OTEL_EXPORTER_OTLP_LOGS_PROTOCOL=grpc
OTEL_EXPORTER_OTLP_LOGS_INSECURE=true

# OpenTelemetry Configuration - FastAPI Instrumentation
# Exclude health check endpoints from tracing to reduce noise
OTEL_PYTHON_FASTAPI_EXCLUDED_URLS=/health,/health/ready,/health/live

# Frontend OpenTelemetry Configuration - Traces
# Use HTTP/protobuf for frontend since it runs in browser
NEXT_PUBLIC_OTEL_ENABLED=true
NEXT_PUBLIC_OTEL_SERVICE_NAME=saas-platform-frontend
NEXT_PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://localhost:4318/v1/traces
NEXT_PUBLIC_OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=http/protobuf

# Frontend OpenTelemetry Configuration - Metrics
NEXT_PUBLIC_OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://localhost:4318/v1/metrics
NEXT_PUBLIC_OTEL_EXPORTER_OTLP_METRICS_PROTOCOL=http/protobuf

# Frontend OpenTelemetry Configuration - Logs
NEXT_PUBLIC_OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://localhost:4318/v1/logs
NEXT_PUBLIC_OTEL_EXPORTER_OTLP_LOGS_PROTOCOL=http/protobuf

# Next.js OpenTelemetry Controls
# Set to 1 to see more detailed Next.js internal spans (increases noise)
# Set to 0 to reduce Next.js internal tracing (recommended for production)
NEXT_OTEL_VERBOSE=0

# Disable Next.js fetch instrumentation if using custom fetch tracing
NEXT_OTEL_FETCH_DISABLED=1